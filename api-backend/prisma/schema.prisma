datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

model User {
    id String @id @default(uuid())

    email           String @unique
    yearOfBirth     Int
    password        String
    telephoneNumber String

    locationKnown Boolean @default(false)
    longitude     Float   @default(0)
    latitude      Float   @default(0)

    // Auth
    refreshToken String? // A hashed refresh token

    // If user is assistant, connect to assistant table
    userType  UserType   @default(USER)
    assistant Assistant? @relation(fields: [assistantId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    BidCreated  Bid[] @relation(name: "BidCreated")
    BidAssisted Bid[] @relation(name: "BidAssisted")

    assistantId String?
}

model Assistant {
    id String @id @default(uuid())

    wallet        String?
    numberOfHelps Int     @default(0)
    tips          Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User[]
    // Badge     Badge[]
}

model Bid {
    id String @id @default(uuid())

    // Bid must be created by a user, but can only be helped by one user at a time!
    createdBy  User  @relation("BidCreated", fields: [createdUserId], references: [id])
    assistedBy User? @relation("BidAssisted", fields: [assistedUserId], references: [id])

    dateOfConfirmation DateTime?
    status             BidStatus @default(OPEN)

    description String

    typeOfProblem TypeOfProblem
    tipAmount     Int           @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdUserId  String
    assistedUserId String?
}

model Achievement {
    id String @id @default(uuid())
    createdBy User

    contractAddress String
    contractName    String
    name            String
    description     String
    level           Int

    // backendName BackendEnum

    // description String
    // name        String
    // image       Bytes

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Badge     Badge[]
}

// model Badge {
//     id String @id @default(uuid())

//     assistant Assistant @relation(fields: [assistantId], references: [id])
//     nft       NFT       @relation(fields: [nFTId], references: [id])

//     createdAt   DateTime @default(now())
//     updatedAt   DateTime @updatedAt
//     assistantId String
//     nFTId       String
// }

enum TypeOfProblem {
    PC
    MOBILE
    PRINTER
    OTHER
}

enum BidStatus {
    OPEN
    ASSIGNED
    CLOSED
}

enum UserType {
    USER
    ASSISTANT
    ADMIN
}

enum AchievementEnum {
    GOOD_SAMARIAN
    TETA_HELPER
}

// // PO TEM JIH SEARCI
// enum BackendEnum {
//     GOOD_SAMARIAN
//     TETA_HELPER
// }
